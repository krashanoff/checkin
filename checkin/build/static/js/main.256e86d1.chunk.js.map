{"version":3,"sources":["components/Start/Start.js","components/Results/Results.js","components/Checkin/Checkin.js","components/Admin/Admin.js","components/Missing/Missing.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Start","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","includesForNames","array","lastName","i","length","state","value","data","lastNamesAll","lastNamesVisible","redirectWith","searchConducted","noResults","handleChange","bind","assertThisInitialized","handleSubmit","event","input","target","setState","names","Axios","get","response","alert","Array","from","forEach","contact","includes","_this2","accountLast","push","id","name","toUpperCase","sort","pairA","pairB","preventDefault","visible","_this3","rw","tuple","_this4","react_default","a","createElement","react_router","to","pathname","ids","className","key","react_router_dom","onSubmit","type","placeholder","onChange","React","Component","Results","values","location","window","href","desiredContact","entries","accountFirst","altFirst","axios","require","Entry","Counter","e","console","log","onClick","Checkin","submissionInProgress","requestData","parents","caregivers","children","document","getElementsByClassName","entry","lastChild","firstChild","checked","String","innerHTML","thirdAdult","counters","counter","adultGuests","Number","childGuests","post","then","catch","parentCount","caregiverCount","childCount","altLast","caregiverName","childName","Checkin_Counter","UserInfo","Admin","Admin_UserInfo","uid","Missing","App","class","exact","path","component","Boolean","hostname","match","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.256e86d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Start.css';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Axios from 'axios';\r\n\r\n// dictates the minimum amount required to input before we\r\n// start parsing for suggestions.\r\nconst SEARCHMIN = 3;\r\n\r\n/* TODO:\r\n *  - Set catchalls for when we read this.state.data.\r\n *  - Associate each Link with the contact of concern, not just the entire block\r\n *    of data we initially retrieve.\r\n *  - Provide access to member's phone number for an emergency, and to all members'\r\n *    emails for a general emergency message.\r\n *  - Provide more verbose error feedback, maybe a timeout before trying to run\r\n *    a query again.\r\n */\r\nclass Start extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // declare all necessary fields for parsing\r\n        this.state = {\r\n            value: '',\r\n            data: [],\r\n            lastNamesAll: [],\r\n            lastNamesVisible: [],\r\n            redirectWith: [],\r\n            searchConducted: '',\r\n            noResults: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // this function is used later on. It takes the names array and\r\n    // returns the index of the lastName passed if already present in\r\n    // the array. Otherwise, it returns -1.\r\n    includesForNames = (array, lastName) => {\r\n        for (var i = 0; i < array.length; i++)\r\n            if (array[i][1] === lastName)\r\n                return i;\r\n        \r\n        return -1;\r\n    }\r\n\r\n    /* handleChange\r\n     * On change of the text field, if the field is of the proper length, then\r\n     * we query for relevant names that match the search term.\r\n     * The function is async as we must wait for the server response before any\r\n     * search suggestions may be made.\r\n     */\r\n    async handleChange(event) {\r\n        // update our state to match the input\r\n        const input = event.target.value;\r\n        this.setState({\r\n            value: input\r\n        });\r\n\r\n        // if we have not yet met the minimum query length,\r\n        // then remove visible suggestions.\r\n        if (input.length < SEARCHMIN) {\r\n            this.setState({\r\n                lastNamesAll: [],\r\n                lastNamesVisible: [],\r\n                searchConducted: 'false'\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        // used in almost every single part of the following code:\r\n        var names = [];\r\n\r\n        // when we reach the minimum query length, we request\r\n        // data from the API and begin our suggestions.\r\n        if (this.state.searchConducted === 'false' && input.length === SEARCHMIN) {\r\n            // get data from the API.\r\n            try {\r\n                const response = await Axios.get('/api/search/' + input);\r\n                this.setState({\r\n                    data: response.data\r\n                });\r\n            } catch {\r\n                alert('Failed retrieving data from the server. Is the server running?');\r\n                return;\r\n            }\r\n\r\n            // populate the lastNamesAll field, mirroring its contents in the\r\n            // lastNamesVisible state field.\r\n            names = [];\r\n\r\n            // for all our contacts received:\r\n            Array.from(this.state.data).forEach( (contact) => {\r\n                // test for inclusion.\r\n                const includes = this.includesForNames(names, contact.accountLast);\r\n\r\n                // if the last name isn't already in the array,\r\n                // then push a new pair containing an unfilled\r\n                // array of ids associated to a single last name.\r\n                if (includes === -1)\r\n                    names.push([ [contact.id], contact.accountLast ]);\r\n\r\n                // otherwise, insert at the location returned by our\r\n                // inclusion function.\r\n                else\r\n                    names[includes][0].push(contact.id);\r\n            });\r\n\r\n            // update the current state to reflect the new information\r\n            this.setState({\r\n                lastNamesAll: names,\r\n                searchConducted: 'true'\r\n            });\r\n        }\r\n\r\n        // Based on the current input, limit the number of visible results from\r\n        // previously parsed data. This is stored in state.lastNamesVisible.\r\n        // This limits our number of overall API requests per check-in.\r\n\r\n        // push only the names that have the current search as a substring.            \r\n        names = [];\r\n        Array.from(this.state.lastNamesAll).forEach( (name) => {\r\n            if (name[1].toUpperCase().includes(input.toUpperCase())) {\r\n                names.push(name);\r\n            }\r\n        });\r\n\r\n        // sort using a method specifically for our data type.\r\n        names.sort( (pairA, pairB) => {\r\n            return pairA[1] > pairB[1];\r\n        });\r\n\r\n        this.setState({\r\n            lastNamesVisible: names\r\n        });\r\n\r\n        // if no matches are found, then display our \"no results found\"\r\n        // message.\r\n        if (this.state.lastNamesVisible.length === 0 && this.state.searchConducted === 'true') {\r\n            this.setState({\r\n                noResults: 'true'\r\n            });\r\n        } else {\r\n            this.setState({\r\n                noResults: 'false'\r\n            });\r\n        }\r\n    }\r\n\r\n    /* handleSubmit\r\n     * On submission of the form, we set the state field 'redirectWith'\r\n     * to our currently visible names, and then force load the results\r\n     * page with the current data and names.\r\n     */\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // In the case that we have no suggestions, but \r\n        if (this.state.value.length > 1 && this.state.lastNamesVisible.length === 0) {\r\n            try {\r\n                const response = await Axios.get('/api/search/' + this.state.value);\r\n                this.setState({\r\n                    data: response.data\r\n                });\r\n            } catch {\r\n                alert('Failed retrieving data from the server. Is the server running?');\r\n                return;\r\n            }\r\n            \r\n            var visible = [];\r\n\r\n            // for all our contacts received:\r\n            Array.from(this.state.data).forEach( (contact) => {\r\n                // test for inclusion.\r\n                const includes = this.includesForNames(visible, contact.accountLast);\r\n\r\n                // if the last name isn't already in the array,\r\n                // then push a new pair containing an unfilled\r\n                // array of ids associated to a single last name.\r\n                if (includes === -1)\r\n                    visible.push([ [contact.id], contact.accountLast ]);\r\n\r\n                // otherwise, insert at the location returned by our\r\n                // inclusion function.\r\n                else\r\n                    visible[includes][0].push(contact.id);\r\n            });\r\n\r\n            // set our state to properly work for the code to follow.\r\n            this.setState({\r\n                lastNamesVisible: visible\r\n            });\r\n        }\r\n\r\n        // construct a concatenated array of the presently available ids and associated names\r\n        // to send to the results page.\r\n        var rw = [];\r\n        Array.from(this.state.lastNamesVisible).forEach( (tuple) => {\r\n            tuple[0].forEach( (id) => {\r\n                rw.push(id);\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            redirectWith: rw\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // if we have received the signal to redirect, simply redirect\r\n        // with all relevant results.\r\n        if (this.state.redirectWith.length !== 0)\r\n            return (<Redirect to={{\r\n                pathname: '/results',\r\n                state: {\r\n                    ids: this.state.redirectWith,\r\n                    data: this.state.data\r\n                }\r\n            }} />);\r\n\r\n        // parse our current data to render the suggestions\r\n        var names = [];\r\n\r\n        // if we have no results, display the \"no results\" message.\r\n        if (this.state.noResults === 'true') {\r\n            names.push(<div className='suggestion noResults' key='0'>No results found.</div>);\r\n        }\r\n        // otherwise, display our suggestions.\r\n        else {\r\n            Array.from(this.state.lastNamesVisible).forEach( (name) => {\r\n                // create a new suggestion Link with uid information.\r\n                names.push(<Link to={{\r\n                    pathname: '/results',\r\n                    state: {\r\n                        ids: name[0],\r\n                        data: this.state.data\r\n                    }\r\n                }} className='suggestion' key={name[1]}>{name[1]}</Link>);\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div id='start'>\r\n                <form id='suggestions' onSubmit={this.handleSubmit}>\r\n                    <input type='text' placeholder='Please enter a last name...' value={this.state.value} onChange={this.handleChange} />\r\n                    <div id='names'>\r\n                        {names}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Start;","import React from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport './Results.css';\r\n\r\n/* Results\r\n * Renders relevant information from contact info passed to it as props\r\n * to help the user pick their name out.\r\n */\r\nclass Results extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const values = this.props.location.state;\r\n\r\n        // if we are missing props, or have no ids passed, then return the 404 page.\r\n        if ((typeof values === 'undefined') || (typeof values.ids === \"undefined\") || (typeof values.data === 'undefined'))\r\n            window.location.href = '/404';\r\n    }\r\n\r\n    render() {\r\n        // catch no results found.\r\n        if (this.props.location.state.ids.length === 0) {\r\n            return (\r\n                <p>No members were found matching your query. Please <Link to='/'>return to the start</Link>.</p>\r\n            );\r\n        }\r\n\r\n        // if we have only one id passed, then just redirect to the proper checkin page.\r\n        if (this.props.location.state.ids.length === 1) {\r\n            // select only the contact we are concerned with from our data.\r\n            var desiredContact;\r\n            Array.from(this.props.location.state.data).forEach( (contact) => {\r\n                if (contact.id === this.props.location.state.ids[0])\r\n                    desiredContact = contact;\r\n            });\r\n\r\n            return (\r\n                <Redirect to={{\r\n                    pathname: '/checkin',\r\n                    state: {\r\n                        id: this.props.location.state.ids[0],\r\n                        contact: desiredContact\r\n                    }\r\n                }} />\r\n            );\r\n        }\r\n\r\n        // create table entries for each id we are passed.\r\n        var entries = [];\r\n        Array.from(this.props.location.state.ids).forEach( (id) => {\r\n            Array.from(this.props.location.state.data).forEach( (contact) => {\r\n                if (contact.id === id) {\r\n                    entries.push(\r\n                        <tr className='contactEntry' key={id}>\r\n                            <td><Link to={{\r\n                                pathname:'/checkin',\r\n                                state: {\r\n                                    id: id,\r\n                                    contact: contact\r\n                                }\r\n                            }}>{contact.accountLast}</Link></td>\r\n                            <td>{contact.accountFirst}</td>\r\n                            <td>{contact.altFirst}</td>\r\n                        </tr>\r\n                    );\r\n                }\r\n            });\r\n        });\r\n\r\n        return (\r\n            <table id='results'>\r\n                <caption>Which family?</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Last Name</th>\r\n                        <th>First Name</th>\r\n                        <th>Spouse Name</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {entries}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport './Checkin.css';\r\nconst axios = require('axios');\r\n\r\n/* Entry\r\n * A row in a table that contains the name and id passed\r\n * to it, along with a checkmark to toggle the entry's\r\n * current status.\r\n */\r\nfunction Entry(props) {\r\n    return (\r\n        <tr className='entry' id={props.id}>\r\n            <td>{props.name}</td>\r\n            <td>\r\n                <div className='checkbox'>\r\n                    <input type='checkbox' name={props.name} />\r\n                    <span className='checkmark' />\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\n/* Counter\r\n * A component that counts positive integers.\r\n */\r\nclass Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (typeof this.props.name === 'undefined')\r\n            console.log(\"ERROR: COUNTER COMPONENT REQUIRES A NAME PARAMETER.\");\r\n\r\n        this.state = {\r\n            value: 0\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        // fired on subtraction.\r\n        if (e.target.className === 'minus') {\r\n            // if the value is currently zero, we cannot go negative. Return early.\r\n            if (this.state.value === 0)\r\n                return;\r\n\r\n            // otherwise update the state.\r\n            this.setState({value: this.state.value - 1});\r\n        }\r\n        // fired on addition.\r\n        else\r\n            // positives are far less sanitized. Simply update the state.\r\n            this.setState({value: this.state.value + 1});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='counter'>\r\n                <button type='button' className='minus' onClick={this.handleChange}>-</button>\r\n                <button name={this.props.name} type='button' className='count'>{this.state.value}</button>\r\n                <button type='button' className='plus' onClick={this.handleChange}>+</button>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n// TODO: Add their street number for confirmation.\r\nclass Checkin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const values = this.props.location.state;\r\n\r\n        // validate the state passed to our page.\r\n        if ((typeof values === 'undefined')\r\n            || (typeof values.id === 'undefined')\r\n            || (typeof values.contact === 'undefined'))\r\n            window.location.href = '/404';\r\n\r\n        this.state = {\r\n            id: values.id,\r\n            contact: values.contact,\r\n            submissionInProgress: ''\r\n        };\r\n    }\r\n\r\n    /* handleSubmit\r\n     * Scrapes our webpage for all relevant data, then submits it to the\r\n     * server for processing.\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // stop a secondary submission from being completed in parallel.\r\n        if (this.state.submissionInProgress === 'true')\r\n            return;\r\n\r\n        var requestData = {};\r\n\r\n        // append id.\r\n        requestData.id = this.state.id;\r\n\r\n        // append account last name.\r\n        requestData.lastName = this.state.contact.accountLast;\r\n\r\n        // find and sort guests being checked in.\r\n        requestData.parents = [];\r\n        requestData.caregivers = [];\r\n        requestData.children = [];\r\n        const entries = document.getElementsByClassName('entry');\r\n        Array.from(entries).forEach( (entry) => {\r\n            if (entry.lastChild.firstChild.firstChild.checked === true) {\r\n                const id = String(entry.id);\r\n                const name = entry.firstChild.innerHTML;\r\n\r\n                // push each entry to its respective array.\r\n                if (id.includes('parent'))\r\n                    requestData.parents.push(name);\r\n                else if (id === 'thirdAdult')\r\n                    requestData.thirdAdult = name;\r\n                else if (id.includes('caregiver'))\r\n                    requestData.caregivers.push(name);\r\n                else if (id.includes('child'))\r\n                    requestData.children.push(name);\r\n            }\r\n        });\r\n\r\n        // acquire guest counts from our counters.\r\n        var counters = document.getElementsByClassName('count');\r\n        Array.from(counters).forEach( (counter) => {\r\n            if (counter.name === 'adultGuests')\r\n                requestData.adultGuests = Number(counter.innerHTML);\r\n            else\r\n                requestData.childGuests = Number(counter.innerHTML);\r\n        });\r\n\r\n        // Catch faulty or accidental submissions.\r\n        if (requestData.parents.length === 0\r\n            && requestData.caregivers.length === 0\r\n            && requestData.children.length === 0) {\r\n                alert('ERROR: No adults or children are selected');\r\n                return;\r\n            }\r\n        \r\n        // indicate to the component that we have a submission in progress that should\r\n        // not be duplicated.\r\n        this.setState({ submissionInProgress: 'true' });\r\n\r\n        // submit our request with the necessary data.\r\n        axios.post('/api/log', {\r\n                data: requestData\r\n        })\r\n        // if successful, then continue to the start screen.\r\n        .then( () => {\r\n            window.location.href = '/';\r\n        })\r\n        // if the request fails, then display our error message.\r\n        .catch( () => {\r\n            this.setState({ submissionInProgress: 'false' });\r\n            alert(\"ERROR: Logging could not be completed properly. Please wait a few seconds and try again.\\nIf this message persists, then contact the administrator.\");\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var parents = [];\r\n        var caregivers = [];\r\n        var children = [];\r\n        var i = 0;\r\n        var parentCount = 0;\r\n        var caregiverCount = 0;\r\n        var childCount = 0;\r\n\r\n        parents.push(<Entry name={String(this.state.contact.accountFirst + ' ' + this.state.contact.accountLast)} id={String('parent' + parentCount)} key={i} />);\r\n        i++;\r\n        parentCount++;\r\n\r\n        // Add the second possible parent, if present.\r\n        if (typeof this.state.contact.altFirst !== 'undefined' && typeof this.state.contact.altLast !== 'undefined') {\r\n            parents.push(<Entry name={String(this.state.contact.altFirst + ' ' + this.state.contact.altLast)} id={String('parent' + parentCount)} key={i} />);\r\n            i++;\r\n            parentCount++;\r\n        }\r\n\r\n        // Add the third adult field.\r\n        if (typeof this.state.contact.thirdAdult !== 'undefined') {\r\n            parents.push(<Entry name={String(this.state.contact.thirdAdult)} id='thirdAdult' key={i} />);\r\n            i++;\r\n        }\r\n\r\n        // Add the caregivers applicable.\r\n        Array.from(this.state.contact.caregivers).forEach( (caregiverName) => {\r\n            caregivers.push(<Entry name={caregiverName} id={String('caregiver' + caregiverCount)} key={i} />);\r\n            i++;\r\n            caregiverCount++;\r\n        });\r\n\r\n        // Add the children applicable.\r\n        Array.from(this.state.contact.children).forEach( (childName) => {\r\n            children.push(<Entry name={childName} id={String('child' + childCount)} key={i} />);\r\n            i++;\r\n            childCount++;\r\n        });\r\n\r\n        return (\r\n            <div id='checkin'>\r\n                <table className='namesTable' id='parents'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Adults</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {parents}\r\n                        {caregivers}\r\n                    </tbody>\r\n                </table>\r\n                \r\n                <table className='namesTable' id='children'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Children</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                        // Render the child table only if child names are present.\r\n                        // TODO: Make this look nicer.\r\n                        children.length > 0 ?\r\n\r\n                        children : <tr><td>This account has no children associated.</td></tr>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n\r\n                <table className='namesTable' id='guests'>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Adult Guests</td>\r\n                            <td><Counter name='adultGuests' /></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Child Guests</td>\r\n                            <td><Counter name='childGuests' /></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <input onClick={this.handleSubmit} type='button' value='Check-In' id='checkinButton' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Checkin;","import React from 'react';\r\nimport './Admin.css';\r\n\r\n/* TODO:\r\n *  - Implement some sort of lazy loading functionality for the table.\r\n */\r\n\r\nclass UserInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (typeof this.props.data === 'undefined')\r\n            console.log('NO DATA PROVIDED');\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className='userInfo'>\r\n                <p>Family Name: {this.props.data.lastName}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Admin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ value: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        var currentData = [];\r\n\r\n        // TODO: Populate the current data.\r\n\r\n        return (\r\n            <div id='admin'>\r\n                <div id='masterTable'>\r\n                    <input type='text' name='lastName' onChange={this.handleChange} value={this.state.value} placeholder='Search for a last name...' />\r\n\r\n                    <table id='masterTable'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Last Name</th>\r\n                                <th>First Name</th>\r\n                                <th>Spouse/Partner</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { currentData }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {\r\n                    this.state.value.length === 3 ?\r\n\r\n                    <UserInfo uid='2' />\r\n\r\n                    : <UserInfo uid='null' />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;","import React from 'react';\r\n\r\nclass Missing extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='404'>\r\n                <h1>MISSING PAGE</h1>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Missing;","import React from 'react';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport Start from '../Start/Start';\r\nimport Results from '../Results/Results';\r\nimport Checkin from '../Checkin/Checkin';\r\nimport Admin from '../Admin/Admin';\r\nimport Missing from '../Missing/Missing';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div id='nav'>\r\n                    <Link className='navLink' to='/'>SHHA Check-In System</Link>\r\n                    <div id='links'>\r\n                        <a class='navLink' href='/admin/logout'>Logout</a>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id='view'>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Start} />\r\n                        <Route path='/results' component={Results} />\r\n                        <Route path='/checkin' component={Checkin} />\r\n                        <Route path='/admin' component={Admin} />\r\n                        <Route exact path='*' component={Missing} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './globals.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}